name: CD with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: "adopt"

    - name: Make application.properties
      run: |
        echo "cd debug $pwd $ls"
        cd ./haemil-backend/src/main/resources
        touch ./application.yml
        echo "${{ secrets.PROPERTIES_YML }}" > ./application.yml
      shell: bash

    # gradle을 통해 소스를 빌드.
    - name: Build with Gradle
      run: |
           chmod +x ./gradlew
           ./gradlew clean build -x test

    # dockerfile을 통해 이미지를 빌드하고, 이를 docker repo로 push 합니다.
    # 이 때 사용되는 ${{ secrets.DOCKER_REPO }}/directors-dev 가 위에서 만든 도커 repository 입니다.
    - name: Docker build & push to docker repo
      run: |
           docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}
           docker build -f Dockerfile -t ${{ secrets.DOCKER_REPO }}/directors-dev .
           docker push ${{ secrets.DOCKER_REPO }}/directors-dev

    # appleboy/ssh-action@master 액션을 사용하여 지정한 서버에 ssh로 접속하고, script를 실행합니다.
    # script의 내용은 도커의 기존 프로세스들을 제거하고, docker repo로부터 방금 위에서 push한 내용을 pull 받아 실행하는 것입니다. 
    # 실행 시, docker-compose를 사용합니다.
    - name: Deploy to server
      uses: appleboy/ssh-action@master
      id: deploy
      with:
        host: ${{ secrets.HOST }}
        username: ubuntu
        key: ${{ secrets.KEY }}
        envs: GITHUB_SHA
        script: |
          sudo docker rm -f $(docker ps -qa)
          sudo docker pull ${{ secrets.DOCKER_REPO }}/directors-dev
          docker-compose up -d
          docker image prune -f
